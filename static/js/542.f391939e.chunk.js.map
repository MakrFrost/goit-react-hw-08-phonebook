{"version":3,"file":"static/js/542.f391939e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","redux/contacts/selectors.js","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"log_form\":\"LoginForm_log_form__IjZct\",\"log_mail\":\"LoginForm_log_mail__xYbdn\",\"log_icon_mail\":\"LoginForm_log_icon_mail__8MDAo\",\"log_pass\":\"LoginForm_log_pass__ITIXo\",\"reg_icon_pass\":\"LoginForm_reg_icon_pass__jRUPN\",\"reg_icon_nopass\":\"LoginForm_reg_icon_nopass__J67vD\",\"log_btn\":\"LoginForm_log_btn__bhCr9\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { MdOutlineEmail } from 'react-icons/md';\n\nimport { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';\nimport { logIn } from 'redux/auth/operations';\nimport css from './LoginForm.module.css';\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const [typeInput, setTypeInput] = useState('password');\n  const [noPassId, setNoPassId] = useState('pass');\n  const [closedEyeIcon, setClosedEyeIcon] = useState(true);\n\n  function LookPassword(e) {\n    if (e.currentTarget.id === 'pass') {\n      setTypeInput('text');\n      setNoPassId('noPass');\n      setClosedEyeIcon(false);\n    } else {\n      setTypeInput('password');\n      setNoPassId('pass');\n      setClosedEyeIcon(true);\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  }\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"on\" className={css.log_form}>\n      <label className={css.log_mail}>\n        Email\n        <input type=\"email\" name=\"email\" />\n        <MdOutlineEmail className={css.log_icon_mail} />\n      </label>\n      <label className={css.log_pass}>\n        Password\n        <input type={typeInput} name=\"password\" id={noPassId} />\n        {closedEyeIcon ? (\n          <AiFillEyeInvisible\n            id={noPassId}\n            onClick={LookPassword}\n            className={css.reg_icon_nopass}\n          />\n        ) : (\n          <AiFillEye\n            id={noPassId}\n            onClick={LookPassword}\n            className={css.reg_icon_pass}\n          />\n        )}\n      </label>\n      <button type=\"submit\" className={css.log_btn}>\n        Log In\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"reg_form\":\"RegisterForm_reg_form__Dc7JL\",\"reg_name\":\"RegisterForm_reg_name__598Je\",\"reg_icon_name\":\"RegisterForm_reg_icon_name__NYiXR\",\"reg_mail\":\"RegisterForm_reg_mail__5C13t\",\"reg_icon_mail\":\"RegisterForm_reg_icon_mail__ZvLSg\",\"reg_pass\":\"RegisterForm_reg_pass__GwLuA\",\"reg_icon_pass\":\"RegisterForm_reg_icon_pass__pAe1l\",\"reg_icon_nopass\":\"RegisterForm_reg_icon_nopass__RTuEX\",\"reg_btn\":\"RegisterForm_reg_btn__1jvIF\"};","import { useState } from 'react';\nimport { AiFillEye, AiFillEyeInvisible, AiOutlineUser } from 'react-icons/ai';\nimport { MdOutlineEmail } from 'react-icons/md';\n\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport css from './RegisterForm.module.css';\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n  const [typeInput, setTypeInput] = useState('password');\n  const [noPassId, setNoPassId] = useState('pass');\n  const [closedEyeIcon, setClosedEyeIcon] = useState(true);\n\n  function LookPassword(e) {\n    if (e.currentTarget.id === 'pass') {\n      setTypeInput('text');\n      setNoPassId('noPass');\n      setClosedEyeIcon(false);\n    } else {\n      setTypeInput('password');\n      setNoPassId('pass');\n      setClosedEyeIcon(true);\n    }\n  }\n\n  function FormSubmit(e) {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n    form.reset();\n  }\n\n  return (\n    <form onSubmit={FormSubmit} className={css.reg_form}>\n      <label className={css.reg_name}>\n        Username\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <AiOutlineUser className={css.reg_icon_name} />\n      </label>\n      <label className={css.reg_mail}>\n        Email\n        <input type=\"email\" name=\"email\" required />\n        <MdOutlineEmail className={css.reg_icon_mail} />\n      </label>\n      <label className={css.reg_pass}>\n        Password\n        <input type={typeInput} name=\"password\" required />\n        {closedEyeIcon ? (\n          <AiFillEyeInvisible\n            className={css.reg_icon_nopass}\n            onClick={LookPassword}\n            id={noPassId}\n          />\n        ) : (\n          <AiFillEye\n            className={css.reg_icon_pass}\n            onClick={LookPassword}\n            id={noPassId}\n          />\n        )}\n      </label>\n      <button type=\"submit\" className={css.reg_btn}>\n        Create\n      </button>\n    </form>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const isLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\n//!\nexport const sortContacts = arr => {\n  return [...arr.sort((a, b) => a.name.localeCompare(b.name))];\n};\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const visibleContacts = contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return sortContacts(visibleContacts);\n  }\n);\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  function changeFilter(e) {\n    const inputValue = e.target.value;\n    dispatch(setFilter(inputValue));\n  }\n\n  return (\n    <label htmlFor=\"filter\">\n      Find you contacts by name:\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter name here\"\n        onChange={changeFilter}\n      />\n    </label>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li>\n      {name} : {number} <br />\n      <button type=\"button\" id={id} onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const totalContacts = contacts.length;\n\n  return (\n    <ul>\n      {contacts.map(({ number, name, id }) => (\n        <ContactItem key={id} number={number} name={name} id={id} />\n      ))}\n      <p>Total contacts in you phonebook: {totalContacts}</p>\n    </ul>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    const currentName = name;\n    const matchName = contacts.some(\n      contact => contact.name.toLowerCase() === currentName.toLowerCase()\n    );\n\n    if (!matchName) {\n      dispatch(addContact({ ...newContact }));\n    }\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter, ContactForm, ContactList } from 'components/index';\nimport Loader from 'components/Loader/Loader';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const Loading = useSelector(isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"123\">\n      <ContactForm />\n      <Filter />\n      <div>{Loading && <Loader />}</div>\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["LoginForm","dispatch","useDispatch","useState","typeInput","setTypeInput","noPassId","setNoPassId","closedEyeIcon","setClosedEyeIcon","LookPassword","e","currentTarget","id","onSubmit","preventDefault","form","logIn","email","elements","value","password","reset","autoComplete","className","css","type","name","onClick","RegisterForm","register","pattern","title","required","selectContacts","state","contacts","items","isLoading","selectVisibleContacts","createSelector","filter","arr","visibleContacts","toLowerCase","includes","sort","a","b","localeCompare","Filter","htmlFor","placeholder","onChange","inputValue","target","setFilter","ContactItem","number","deleteContact","ContactList","useSelector","totalContacts","length","map","ContactForm","newContact","currentName","some","contact","addContact","ContactsPage","Loading","useEffect","fetchContacts","Loader"],"sourceRoot":""}